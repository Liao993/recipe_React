{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n// get all recipes\nconst getRecipes = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8000/recipes/\");\n    const json = await response.json();\n    return json;\n  } catch (e) {\n    alert(e.message);\n  }\n};\n\n//get recipes details\nconst getRecipeDetails = async id => {\n  const response = await fetch(\"http://localhost:8000/recipes/\" + id);\n  const json = await response.json();\n  return json;\n};\nconst useFetchDetail = id => {\n  _s();\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const received_data = await getRecipeDetails(id); // Call the imported function to get json data\n\n        setData(received_data);\n      } catch (e) {\n        alert(e.message);\n      }\n    }\n    fetchData();\n  }, []);\n  return {\n    data\n  };\n};\n// get a recipe fetch method\n\n// create a recipe fetch method\n_s(useFetchDetail, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\nconst createRecipe = async recipe => {\n  try {\n    const response = await fetch(\"http://localhost:8000/recipes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(recipe)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to add recipe\");\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n//update recipe fetch method\n\n//delete recipe fetch method\nconst deleteRecipe = async id => {\n  try {\n    const response = await fetch(\"http://localhost:8000/recipes/\" + id, {\n      method: \"DELETE\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete recipe\");\n    }\n  } catch (error) {\n    throw error;\n  }\n};\nexport { getRecipes, useFetchDetail, createRecipe, deleteRecipe };","map":{"version":3,"names":["useState","useEffect","getRecipes","response","fetch","json","e","alert","message","getRecipeDetails","id","useFetchDetail","_s","data","setData","fetchData","received_data","createRecipe","recipe","method","headers","body","JSON","stringify","ok","Error","error","deleteRecipe"],"sources":["/Users/liaohungen/projects/react_recipe/src/services/JsonServerClient.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n// get all recipes\nconst getRecipes = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8000/recipes/\");\n    const json = await response.json();\n    return json;\n  } catch (e) {\n    alert(e.message);\n  }\n};\n\n//get recipes details\nconst getRecipeDetails = async (id) => {\n  const response = await fetch(\"http://localhost:8000/recipes/\" + id);\n  const json = await response.json();\n\n  return json;\n};\n\nconst useFetchDetail = (id) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const received_data = await getRecipeDetails(id); // Call the imported function to get json data\n\n        setData(received_data);\n      } catch (e) {\n        alert(e.message);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return { data };\n};\n// get a recipe fetch method\n\n// create a recipe fetch method\nconst createRecipe = async (recipe) => {\n  try {\n    const response = await fetch(\"http://localhost:8000/recipes\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(recipe),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to add recipe\");\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n//update recipe fetch method\n\n//delete recipe fetch method\nconst deleteRecipe = async (id) => {\n  try {\n    const response = await fetch(\"http://localhost:8000/recipes/\" + id, {\n      method: \"DELETE\",\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete recipe\");\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport { getRecipes, useFetchDetail, createRecipe, deleteRecipe };\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;IAC9D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;EAClB;AACF,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAG,MAAOC,EAAE,IAAK;EACrC,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,GAAGM,EAAE,CAAC;EACnE,MAAML,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;EAElC,OAAOA,IAAI;AACb,CAAC;AAED,MAAMM,cAAc,GAAID,EAAE,IAAK;EAAAE,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,eAAec,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMP,gBAAgB,CAACC,EAAE,CAAC,CAAC,CAAC;;QAElDI,OAAO,CAACE,aAAa,CAAC;MACxB,CAAC,CAAC,OAAOV,CAAC,EAAE;QACVC,KAAK,CAACD,CAAC,CAACE,OAAO,CAAC;MAClB;IACF;IAEAO,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEF;EAAK,CAAC;AACjB,CAAC;AACD;;AAEA;AAAAD,EAAA,CArBMD,cAAc;AAsBpB,MAAMM,YAAY,GAAG,MAAOC,MAAM,IAAK;EACrC,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC5De,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,MAAM;IAC7B,CAAC,CAAC;IAEF,IAAI,CAACf,QAAQ,CAACqB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAEA;AACA,MAAMC,YAAY,GAAG,MAAOjB,EAAE,IAAK;EACjC,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,GAAGM,EAAE,EAAE;MAClES,MAAM,EAAE;IACV,CAAC,CAAC;IACF,IAAI,CAAChB,QAAQ,CAACqB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,SAASxB,UAAU,EAAES,cAAc,EAAEM,YAAY,EAAEU,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}